name: CI
on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Intro
        run: |
          echo "Intro to Release"
          which python
          python --version
          which pip
          pip --version
      - name: Checkout Code
        uses: actions/checkout@v2
      - run: ls -aRl
      - name: Installing dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller
          pip install flake8
      - name: Lint with flake8
        run: |
            # stop the build if there are Python syntax errors or undefined names
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            # exit-zero treats all errors as warnings.
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Packaging the python applications
        run: pyinstaller --onefile src/network_scanner.py
      - run: ls -aRl
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     body: |
      #       Changes in this Release
      #       - ${{ github.event.head_commit.message }}
      #     draft: false
      #     prerelease: false
      - name: Create Release
        if: github.event_name == 'push' #&& github.ref == 'refs/heads/master'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: Uploading executable artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: network_scanner
      #     pr
      - name: Upload Release Asset (Executable)
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./dist/network_scanner
          asset_name: ${{ github.repository }}
          asset_content_type: application/vnd.microsoft.portable-executable
